library(reticulate)
library(tensorflow)
# Use your intended conda environment
use_condaenv("r-tensorflow", required = TRUE)
# Install TensorFlow only if missing
if (!py_module_available("tensorflow")) {
install_tensorflow()
}
# setup_tensorflow.R
library(reticulate)
library(tensorflow)
# Use your intended conda environment
use_condaenv("r-tensorflow", required = TRUE)
library(reticulate)
library(tensorflow)
# Use your intended conda environment
use_condaenv("r-tensorflow", required = TRUE)
# Install TensorFlow only if missing
if (!py_module_available("tensorflow")) {
install_tensorflow()
}
library(reticulate)
library(tensorflow)
# Use your intended conda environment
use_condaenv("r-tensorflow", required = TRUE)
# Install TensorFlow only if missing
if (!py_module_available("tensorflow")) {
install_tensorflow()
}
library(reticulate)
library(tensorflow)
# Use your intended conda environment
use_condaenv("r-tensorflow", required = TRUE)
# Install TensorFlow only if missing
if (!py_module_available("tensorflow")) {
install_tensorflow()
}
# ==================================
# -1. Environment activation
# ==================================
library(reticulate)
use_condaenv("r-tensorflow", required = TRUE)
library(tidyverse)
library(keras)
library(tensorflow)
# Safety check
if (!py_module_available("tensorflow")) {
stop("TensorFlow not found. Make sure it's installed in the 'r-tensorflow' conda environment.")
}
conda_list()
library(reticulate)
use_python("C:/Users/SEC/AppData/Local/r-miniconda/envs/r-tensorflow/python.exe", required = TRUE)
library(tidyverse)
library(keras)
library(tensorflow)
# Safety check
if (!py_module_available("tensorflow")) {
stop("TensorFlow not found. Make sure it's installed in the 'r-tensorflow' conda environment.")
}
conda_list()
# -1. Environment activation
# ==================================
library(reticulate)
use_python("C:/Users/SEC/AppData/Local/r-miniconda/envs/r-tensorflow/python.exe", required = TRUE)
library(tidyverse)
library(keras)
library(tensorflow)
# Safety check
if (!py_module_available("tensorflow")) {
stop("TensorFlow not found. Make sure it's installed in the 'r-tensorflow' conda environment.")
}
> # Safety check
Sys.which("python")
reticulate::py_discover_config()
library(reticulate)
use_python("C:/Users/SEC/AppData/Local/r-miniconda/envs/r-tensorflow/python.exe", required = TRUE)
library(tidyverse)
library(keras)
library(tensorflow)
# Safety check
if (!py_module_available("tensorflow")) {
stop("TensorFlow not found. Make sure it's installed in the 'r-tensorflow' conda environment.")
}
tensorflow::tf_config()
reticulate::use_condaenv("r-tensorflow", required = TRUE)
tensorflow::tf_config()
(
library(reticulate)
use_condaenv("r-tensorflow", required = TRUE)
library(reticulate)
use_condaenv("r-tensorflow", required = TRUE)
tensorflow::tf_config()
tensorflow::install_tensorflow(version = "2.15.0")
library(reticulate)
use_condaenv("r-tensorflow", required = TRUE)
tensorflow::tf_config()
setwd("C:/Users/SEC/Desktop/2024WS/projectR/dataset/filtered_dataset_finalized")
# Load all .rds files in the directory
rds_files <- list.files(pattern = "\\.rds$")
for (file in rds_files) {
var_name <- tools::file_path_sans_ext(file)
assign(var_name, readRDS(file))
}
# Load required libraries
library(tidyverse)
library(forecast)
library(prophet)
library(lubridate)
setwd("C:/Users/SEC/Desktop/2024WS/projectR/dataset/time_series_forecasting")
feature_df <- withdrawals
country_code <- "DEU"  # Germany
df <- feature_df %>%
filter(Country.Code == country_code) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Value") %>%
mutate(Year = as.integer(sub("X", "", Year)))
View(df)
# Visualize the series
ggplot(df, aes(x = Year, y = Value)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_point(color = "black") +
labs(
title = paste("Time Series of Freshwater Withdrawals -", df$Country.Name[1]),
x = "Year",
y = "Withdrawals (billion m³)"
) +
theme_minimal()
adf_test <- tseries::adf.test(ts_germany, alternative = "stationary")
print(adf_test)
library(tseries)
# Check for stationarity using Augmented Dickey-Fuller Test
adf_test <- tseries::adf.test(ts_germany, alternative = "stationary")
print(adf_test)
ts_germany <- ts(df$Value, start = min(df$Year), frequency = 1)
adf_test <- tseries::adf.test(ts_germany, alternative = "stationary")
print(adf_test)
# Plot ACF and PACF to visually inspect autocorrelation
acf(ts_germany, main = "ACF - Germany Withdrawals")
pacf(ts_germany, main = "PACF - Germany Withdrawals")
arima_model <- auto.arima(ts_germany)
# Forecast for 5 future years
arima_forecast <- forecast(arima_model, h = 5)
# Save ARIMA forecast plot
p1 <- autoplot(arima_forecast) +
labs(title = "ARIMA Forecast - Germany Freshwater Withdrawals", x = "Year", y = "Withdrawals (billion m³)") +
theme_minimal()
ggsave("arima_forecast_plot.png", p1, width = 8, height = 5)
arima_out <- data.frame(Year = time(arima_forecast$mean), Forecast = as.numeric(arima_forecast$mean))
write.csv(arima_out, "arima_forecast_values.csv", row.names = FALSE)
# Display model summary
summary(arima_model)
# Residual diagnostics
checkresiduals(arima_model)  # Includes Ljung-Box test, residual ACF, histogram
# Optional: Q-Q plot for normality check
qqnorm(residuals(arima_model)); qqline(residuals(arima_model), col = "red")
prophet_df <- df %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
View(prophet_df)
prophet_model <- prophet(prophet_df, yearly.seasonality = FALSE)
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
forecast_prophet <- predict(prophet_model, future)
# Visualize detected changepoints
plot(prophet_model, forecast_prophet) +
geom_vline(xintercept = as.numeric(prophet_model$changepoints), linetype = "dashed", color = "red") +
ggtitle("Prophet Forecast with Changepoints Highlighted")
ggsave("prophet_forecast_changepoints.png", width = 8, height = 5)
train <- df %>% filter(Year <= 2017)
test  <- df %>% filter(Year > 2017)
# Train ARIMA on training period
ts_train <- ts(train$Value, start = min(train$Year), frequency = 1)
arima_model_eval <- auto.arima(ts_train)
# Forecast test period
arima_fc <- forecast(arima_model_eval, h = nrow(test))
predicted <- as.numeric(arima_fc$mean)
actual <- test$Value
# Compute evaluation metrics
MAE  <- mean(abs(actual - predicted))
RMSE <- sqrt(mean((actual - predicted)^2))
MAPE <- mean(abs((actual - predicted) / actual)) * 100
# Print evaluation results
cat("ARIMA Metrics:\n")
cat("MAE: ", MAE, "\nRMSE:", RMSE, "\nMAPE:", MAPE, "%\n")
start_year <- 1994  # You can adjust this depending on your data length
end_year <- 2014    # We'll forecast each year from here until 2021
horizon <- 1        # Forecast 1 year ahead in each loop
# Initialize vectors
rolling_mae <- c()
rolling_rmse <- c()
rolling_mape <- c()
# Perform rolling forecast
for (i in start_year:end_year) {
train_set <- df %>% filter(Year <= i)
test_set <- df %>% filter(Year == i + horizon)
# Skip if test value is missing
if (nrow(test_set) == 0 || any(is.na(test_set$Value))) next
ts_train <- ts(train_set$Value, start = min(train_set$Year), frequency = 1)
model <- auto.arima(ts_train)
forecast_result <- forecast(model, h = horizon)
pred <- as.numeric(forecast_result$mean)
act <- test_set$Value
rolling_mae  <- c(rolling_mae, mean(abs(act - pred)))
rolling_rmse <- c(rolling_rmse, sqrt(mean((act - pred)^2)))
rolling_mape <- c(rolling_mape, mean(abs((act - pred) / act)) * 100)
}
# Print average results
cat("ARIMA Rolling Forecast Metrics:\n")
cat("Mean MAE: ", mean(rolling_mae), "\n")
cat("Mean RMSE:", mean(rolling_rmse), "\n")
cat("Mean MAPE:", mean(rolling_mape), "%\n")
# Re-train Prophet on training period only
prophet_train <- train %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
prophet_model_eval <- prophet(prophet_train, yearly.seasonality = FALSE)
# Create future dates for test range
future_eval <- make_future_dataframe(prophet_model_eval, periods = nrow(test), freq = "year")
forecast_prophet_eval <- predict(prophet_model_eval, future_eval)
# Extract predictions for test period
predicted <- forecast_prophet_eval %>%
filter(ds >= ymd("2018-01-01", tz = "UTC")) %>%
pull(yhat)
actual <- test$Value
# Compute evaluation metrics
MAE  <- mean(abs(actual - predicted))
RMSE <- sqrt(mean((actual - predicted)^2))
MAPE <- mean(abs((actual - predicted) / actual)) * 100
# Print evaluation results
cat("Prophet Metrics:\n")
cat("MAE: ", MAE, "\nRMSE:", RMSE, "\nMAPE:", MAPE, "%\n")
# Define rolling parameters
start_year <- 2005
end_year <- 2017
horizon <- 1
# Initialize metrics
rolling_mae_prophet <- c()
rolling_rmse_prophet <- c()
rolling_mape_prophet <- c()
# Perform rolling forecast
for (i in start_year:end_year) {
train_set <- df %>% filter(Year <= i)
test_set <- df %>% filter(Year == i + horizon)
# Skip if test value is missing
if (nrow(test_set) == 0 || any(is.na(test_set$Value))) next
# Prepare data for Prophet
prophet_train <- train_set %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
prophet_model <- prophet(prophet_train, yearly.seasonality = FALSE, verbose = FALSE)
# Create future dataframe and predict
future_df <- make_future_dataframe(prophet_model, periods = horizon, freq = "year")
forecast_df <- predict(prophet_model, future_df)
# Get forecast for next year
target_date <- ymd(paste0(i + horizon, "-01-01"))
pred <- forecast_df %>% filter(ds == target_date) %>% pull(yhat)
act <- test_set$Value
rolling_mae_prophet  <- c(rolling_mae_prophet, mean(abs(act - pred)))
rolling_rmse_prophet <- c(rolling_rmse_prophet, sqrt(mean((act - pred)^2)))
rolling_mape_prophet <- c(rolling_mape_prophet, mean(abs((act - pred) / act)) * 100)
}
# Print average results
cat("Prophet Rolling Forecast Metrics:\n")
cat("Mean MAE: ", mean(rolling_mae_prophet), "\n")
cat("Mean RMSE:", mean(rolling_rmse_prophet), "\n")
cat("Mean MAPE:", mean(rolling_mape_prophet), "%\n")
rm(list = ls())
rds_files <- list.files(pattern = "\\.rds$")
for (file in rds_files) {
var_name <- tools::file_path_sans_ext(file)
assign(var_name, readRDS(file))
}
rm(list = ls())
setwd("C:/Users/SEC/Desktop/2024WS/projectR/dataset/filtered_dataset_finalized")
# Load all .rds files in the directory
rds_files <- list.files(pattern = "\\.rds$")
for (file in rds_files) {
var_name <- tools::file_path_sans_ext(file)
assign(var_name, readRDS(file))
}
# Load required libraries
library(tidyverse)
library(forecast)
library(prophet)
library(lubridate)
library(tseries)
setwd("C:/Users/SEC/Desktop/2024WS/projectR/dataset/time_series_forecasting")
# ================================
# 1. Time Series Plot: Withdrawals
# ================================
feature_df <- withdrawals
country_code <- "DEU"  # Germany
# Justification for choosing this variable:
# - Freshwater withdrawals represent direct water demand across all sectors
# - It is mathematically tied to other derived features:
#     GDP (USD) = Water Productivity × Withdrawals
#     Water Stress = Withdrawals / Renewable Water Resources × 100
#   Therefore, orecasting this feature supports economic and sustainability-related insights
# Justification for choosing Germany:
# - Strong long-term declining trend (well-suited for modeling)
# - Moderate fluctuations in mid-years (enables learning variance)
# - No long flat periods (unlike many other countries)
#  : All these properties make the series forecastable and informative
# Reshape data for time series analysis
df <- feature_df %>%
filter(Country.Code == country_code) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Value") %>%
mutate(Year = as.integer(sub("X", "", Year)))
# Visualize the series
ggplot(df, aes(x = Year, y = Value)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_point(color = "black") +
labs(
title = paste("Time Series of Freshwater Withdrawals -", df$Country.Name[1]),
x = "Year",
y = "Withdrawals (billion m³)"
) +
theme_minimal()
View(df)
ts_germany <- ts(df$Value, start = min(df$Year), frequency = 1)
# Check for stationarity using Augmented Dickey-Fuller Test
adf_test <- tseries::adf.test(ts_germany, alternative = "stationary")
print(adf_test)
acf(ts_germany, main = "ACF - Germany Withdrawals")
pacf(ts_germany, main = "PACF - Germany Withdrawals")
# Fit ARIMA model: This uses the auto.arima() function to automatically determine
# the best-fitting ARIMA model for the time series.
arima_model <- auto.arima(ts_germany)
# Forecast for 5 future years
arima_forecast <- forecast(arima_model, h = 5)
setwd("C:/Users/SEC/Desktop/2024WS/projectR/dataset/time_series_forecasting")
# Save ARIMA forecast plot
p1 <- autoplot(arima_forecast) +
labs(title = "ARIMA Forecast - Germany Freshwater Withdrawals", x = "Year", y = "Withdrawals (billion m³)") +
theme_minimal()
ggsave("arima_forecast_plot.png", p1, width = 8, height = 5)
# Save ARIMA forecast values
arima_out <- data.frame(Year = time(arima_forecast$mean), Forecast = as.numeric(arima_forecast$mean))
write.csv(arima_out, "arima_forecast_values.csv", row.names = FALSE)
# Display model summary
summary(arima_model)
lambda <- BoxCox.lambda(ts_germany)
cat("Suggested Box-Cox lambda:", lambda, "\n")
checkresiduals(arima_model)  # Includes Ljung-Box test, residual ACF, histogram
qqnorm(residuals(arima_model)); qqline(residuals(arima_model), col = "red")
prophet_df <- df %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
# Fit Prophet model with yearly seasonality disabled (not needed for annual data)
prophet_model <- prophet(prophet_df, yearly.seasonality = FALSE)
# Create future dates (5 years ahead)
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
# Forecast future withdrawals
forecast_prophet <- predict(prophet_model, future)
# Visualize detected changepoints
plot(prophet_model, forecast_prophet) +
geom_vline(xintercept = as.numeric(prophet_model$changepoints), linetype = "dashed", color = "red") +
ggtitle("Prophet Forecast with Changepoints Highlighted")
ggsave("prophet_forecast_changepoints.png", width = 8, height = 5)
# --- Evaluation on Held-Out Test Set (2018–2021) ---
# Split into training and testing sets
train <- df %>% filter(Year <= 2017)
test  <- df %>% filter(Year > 2017)
ts_train <- ts(train$Value, start = min(train$Year), frequency = 1)
arima_model_eval <- auto.arima(ts_train)
# Forecast test period
arima_fc <- forecast(arima_model_eval, h = nrow(test))
predicted <- as.numeric(arima_fc$mean)
actual <- test$Value
predicted <- as.numeric(arima_fc$mean)
actual <- test$Value
MAE  <- mean(abs(actual - predicted))
RMSE <- sqrt(mean((actual - predicted)^2))
MAPE <- mean(abs((actual - predicted) / actual)) * 100
# Print evaluation results
cat("ARIMA Metrics:\n")
cat("MAE: ", MAE, "\nRMSE:", RMSE, "\nMAPE:", MAPE, "%\n")
start_year <- 2003
end_year <- 2020
horizon <- 1        # Forecast 1 year ahead in each loop
# Initialize vectors
rolling_mae <- c()
rolling_rmse <- c()
rolling_mape <- c()
for (i in start_year:end_year) {
train_set <- df %>% filter(Year <= i)
test_set <- df %>% filter(Year == i + horizon)
# Skip if test value is missing
if (nrow(test_set) == 0 || any(is.na(test_set$Value))) next
ts_train <- ts(train_set$Value, start = min(train_set$Year), frequency = 1)
model <- auto.arima(ts_train)
forecast_result <- forecast(model, h = horizon)
pred <- as.numeric(forecast_result$mean)
act <- test_set$Value
rolling_mae  <- c(rolling_mae, mean(abs(act - pred)))
rolling_rmse <- c(rolling_rmse, sqrt(mean((act - pred)^2)))
rolling_mape <- c(rolling_mape, mean(abs((act - pred) / act)) * 100)
}
cat("ARIMA Rolling Forecast Metrics:\n")
cat("Mean MAE: ", mean(rolling_mae), "\n")
cat("Mean RMSE:", mean(rolling_rmse), "\n")
cat("Mean MAPE:", mean(rolling_mape), "%\n")
prophet_df <- df %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
prophet_model <- prophet(prophet_df, yearly.seasonality = FALSE)
future <- make_future_dataframe(prophet_model, periods = 5, freq = "year")
forecast_prophet <- predict(prophet_model, future)
# Visualize detected changepoints
plot(prophet_model, forecast_prophet) +
geom_vline(xintercept = as.numeric(prophet_model$changepoints), linetype = "dashed", color = "red") +
ggtitle("Prophet Forecast with Changepoints Highlighted")
ggsave("prophet_forecast_changepoints.png", width = 8, height = 5)
# Save Prophet forecast plot
p_prophet <- plot(prophet_model, forecast_prophet) +
geom_vline(xintercept = as.numeric(prophet_model$changepoints), linetype = "dashed", color = "red") +
ggtitle("Prophet Forecast - Germany Freshwater Withdrawals")
ggsave("prophet_forecast_plot.png", plot = p_prophet, width = 8, height = 5)
# Save Prophet forecast values
prophet_out <- forecast_prophet %>% select(ds, yhat, yhat_lower, yhat_upper)
write.csv(prophet_out, "prophet_forecast_values.csv", row.names = FALSE)
p_components <- prophet_plot_components(prophet_model, forecast_prophet)
# Save each component separately (This is practically the same as the forecasting plot.
# because there is no other components than the trend i.e. no seasonality, no holiday effects)
for (i in seq_along(p_components)) {
ggsave(
filename = paste0("prophet_component_", i, ".png"),
plot = p_components[[i]],
width = 8, height = 5
)
}
# --- Evaluation on Held-Out Test Set (2018–2021) ---
# Re-train Prophet on training period only
prophet_train <- train %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
prophet_model_eval <- prophet(prophet_train, yearly.seasonality = FALSE)
# Create future dates for test range
future_eval <- make_future_dataframe(prophet_model_eval, periods = nrow(test), freq = "year")
forecast_prophet_eval <- predict(prophet_model_eval, future_eval)
# Extract predictions for test period
predicted <- forecast_prophet_eval %>%
filter(ds >= ymd("2018-01-01", tz = "UTC")) %>%
pull(yhat)
actual <- test$Value
# Compute evaluation metrics
MAE  <- mean(abs(actual - predicted))
RMSE <- sqrt(mean((actual - predicted)^2))
MAPE <- mean(abs((actual - predicted) / actual)) * 100
# Print evaluation results
cat("Prophet Metrics:\n")
cat("MAE: ", MAE, "\nRMSE:", RMSE, "\nMAPE:", MAPE, "%\n")
start_year <- 2003
end_year <- 2020
horizon <- 1        # Forecast 1 year ahead in each loop
# Initialize vectors
rolling_mae <- c()
rolling_rmse <- c()
rolling_mape <- c()
# Perform rolling forecast
for (i in start_year:end_year) {
train_set <- df %>% filter(Year <= i)
test_set <- df %>% filter(Year == i + horizon)
# Skip if test value is missing
if (nrow(test_set) == 0 || any(is.na(test_set$Value))) next
ts_train <- ts(train_set$Value, start = min(train_set$Year), frequency = 1)
model <- auto.arima(ts_train)
forecast_result <- forecast(model, h = horizon)
pred <- as.numeric(forecast_result$mean)
act <- test_set$Value
rolling_mae  <- c(rolling_mae, mean(abs(act - pred)))
rolling_rmse <- c(rolling_rmse, sqrt(mean((act - pred)^2)))
rolling_mape <- c(rolling_mape, mean(abs((act - pred) / act)) * 100)
}
# Print average results
cat("ARIMA Rolling Forecast Metrics:\n")
cat("Mean MAE: ", mean(rolling_mae), "\n")
cat("Mean RMSE:", mean(rolling_rmse), "\n")
cat("Mean MAPE:", mean(rolling_mape), "%\n")
# Define rolling parameters
start_year <- 2003
end_year <- 2020
horizon <- 1
# Initialize metrics
rolling_mae_prophet <- c()
rolling_rmse_prophet <- c()
rolling_mape_prophet <- c()
# Perform rolling forecast
for (i in start_year:end_year) {
train_set <- df %>% filter(Year <= i)
test_set <- df %>% filter(Year == i + horizon)
# Skip if test value is missing
if (nrow(test_set) == 0 || any(is.na(test_set$Value))) next
# Prepare data for Prophet
prophet_train <- train_set %>%
rename(ds = Year, y = Value) %>%
mutate(ds = ymd(paste0(ds, "-01-01")))
prophet_model <- prophet(prophet_train, yearly.seasonality = FALSE, verbose = FALSE)
# Create future dataframe and predict
future_df <- make_future_dataframe(prophet_model, periods = horizon, freq = "year")
forecast_df <- predict(prophet_model, future_df)
# Get forecast for next year
target_date <- ymd(paste0(i + horizon, "-01-01"))
pred <- forecast_df %>% filter(ds == target_date) %>% pull(yhat)
act <- test_set$Value
rolling_mae_prophet  <- c(rolling_mae_prophet, mean(abs(act - pred)))
rolling_rmse_prophet <- c(rolling_rmse_prophet, sqrt(mean((act - pred)^2)))
rolling_mape_prophet <- c(rolling_mape_prophet, mean(abs((act - pred) / act)) * 100)
}
# Print average results
cat("Prophet Rolling Forecast Metrics:\n")
cat("Mean MAE: ", mean(rolling_mae_prophet), "\n")
cat("Mean RMSE:", mean(rolling_rmse_prophet), "\n")
cat("Mean MAPE:", mean(rolling_mape_prophet), "%\n")
